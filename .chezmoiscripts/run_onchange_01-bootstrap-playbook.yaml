#!/usr/bin/env -S ${CZ_HELPERS}/with-ansible ansible-playbook
---
- name: Bootstrap
  hosts: all
  vars:
    dpkg_architecture: "{{ _dpkg_architecture.stdout }}"
    system_python_interpreter: "{{ _system_python.stdout }}"
    vars_files_dir: "{{ lookup('env', 'CHEZMOI_SOURCE_DIR') }}/.chezmoidata"
  vars_files:
    - "{{ vars_files_dir }}/packages.yaml"

  tasks:
    - name: Discover system Python interpreter
      ansible.builtin.command: env -i which python3
      changed_when: false
      register: _system_python
      tags: [ansible, python]
    # used hereafter to override Python interpreter when running in a virtual environment

    - name: Install pipx
      ansible.builtin.pip:
        name: pipx
        extra_args: --user
      tags: [ansible, python]
      environment: # pip may be installed in a venv: manage system Python interpreter
        PIP_PYTHON: "{{ system_python_interpreter }}"
        # https://pip.pypa.io/en/stable/topics/python-option/#managing-a-different-python-interpreter

    - name: With system Python interpreter
      environment: # make sure pipx uses system Python interpreter
        PIPX_DEFAULT_PYTHON: "{{ system_python_interpreter }}"
        # check `home` value in ~/.local/share/pipx/shared/pyvenv.cfg
      block:
        - name: Install Ansible
          community.general.pipx:
            name: ansible
            install_deps: true
            system_site_packages: true
          tags: [never, ansible]

        - name: Install Python apps with pipx
          community.general.pipx:
            name: "{{ item.package | default(item) }}"
            install_deps: "{{ item.include_deps | default(omit) in ['package', true] }}"
          loop: "{{ python_apps }}"
          tags: [python]

        - name: Inject Python apps dependencies
          community.general.pipx:
            name: "{{ item.package }}"
            state: inject
            inject_packages: "{{ item.dependencies }}"
            install_apps: "{{ item.include_apps | default(omit) }}"
            install_deps: "{{ item.include_deps | default(omit) in ['dependencies', true] }}"
          loop: "{{ python_apps | selectattr('dependencies', 'defined') }}"
          tags: [python]

    - name: Determine system architecture
      ansible.builtin.command: dpkg --print-architecture
      register: _dpkg_architecture
      changed_when: false
      when: >-
        ['archives', 'binaries'] | difference(ansible_skip_tags) | length > 0 or
        ['archives', 'binaries'] | intersect(ansible_run_tags) | length > 0

    - name: Install archives
      ansible.builtin.unarchive:
        remote_src: true
        src: "{{ item.source }}"
        dest: "{{ ansible_env.HOME }}/.local/bin"
        creates: "{{ ansible_env.HOME }}/.local/bin/{{ item.executable | basename }}"
        include: "{{ item.executable }}"
        extra_opts: "{{ [strip_option] if should_strip else omit }}"
      loop: "{{ apps_archives }}"
      tags: [archives]
      vars:
        exec_parents: "{{ item.executable.split('/') | length - 1 }}"
        should_strip: "{{ exec_parents | int > 0 }}"
        strip_option: >-
          {{
            '-j' if item.source.endswith('.zip')
            else '--strip-components=' ~ exec_parents
          }}

    - name: Install binaries
      ansible.builtin.get_url:
        url: "{{ item.source }}"
        dest: "{{ ansible_env.HOME }}/.local/bin/{{ item.executable }}"
        mode: "0755"
      loop: "{{ apps_binaries }}"
      tags: [binaries]
